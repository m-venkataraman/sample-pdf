// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package pdf2excel.data_extraction_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: data_extraction Purpose: linking<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class data_extraction implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "data_extraction";
	private final String projectName = "PDF2EXCEL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				data_extraction.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(data_extraction.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_PDF2EXCEL_data_extraction = new byte[0];
    static byte[] commonByteArray_PDF2EXCEL_data_extraction = new byte[0];

	
			    public Integer Category;

				public Integer getCategory () {
					return this.Category;
				}
				
			    public Integer Style;

				public Integer getStyle () {
					return this.Style;
				}
				
			    public Integer Type;

				public Integer getType () {
					return this.Type;
				}
				
			    public Float Unit_Cost;

				public Float getUnit_Cost () {
					return this.Unit_Cost;
				}
				
			    public String Detailed_Description;

				public String getDetailed_Description () {
					return this.Detailed_Description;
				}
				
			    public Integer Quantity;

				public Integer getQuantity () {
					return this.Quantity;
				}
				
			    public Integer SR_Pack;

				public Integer getSR_Pack () {
					return this.SR_Pack;
				}
				
			    public Integer Packs;

				public Integer getPacks () {
					return this.Packs;
				}
				
			    public String BUYER;

				public String getBUYER () {
					return this.BUYER;
				}
				
			    public Character PRE_TICKET;

				public Character getPRE_TICKET () {
					return this.PRE_TICKET;
				}
				
			    public Integer PO;

				public Integer getPO () {
					return this.PO;
				}
				
			    public String COUNTRY_OF_ORIGIN;

				public String getCOUNTRY_OF_ORIGIN () {
					return this.COUNTRY_OF_ORIGIN;
				}
				
			    public String MODE_OF_TRANSPORT;

				public String getMODE_OF_TRANSPORT () {
					return this.MODE_OF_TRANSPORT;
				}
				
			    public String EXITING_PORT;

				public String getEXITING_PORT () {
					return this.EXITING_PORT;
				}
				
			    public Integer TOTAL_UNITS;

				public Integer getTOTAL_UNITS () {
					return this.TOTAL_UNITS;
				}
				
			    public String CANCEL_SHIPMENT_DATE;

				public String getCANCEL_SHIPMENT_DATE () {
					return this.CANCEL_SHIPMENT_DATE;
				}
				
			    public String STORE_READY;

				public String getSTORE_READY () {
					return this.STORE_READY;
				}
				
			    public Integer Store_No;

				public Integer getStore_No () {
					return this.Store_No;
				}
				
			    public String Store_Address;

				public String getStore_Address () {
					return this.Store_Address;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String Province;

				public String getProvince () {
					return this.Province;
				}
				
			    public String Postal_Code;

				public String getPostal_Code () {
					return this.Postal_Code;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDF2EXCEL_data_extraction.length) {
				if(length < 1024 && commonByteArray_PDF2EXCEL_data_extraction.length == 0) {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[1024];
				} else {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDF2EXCEL_data_extraction, 0, length);
			strReturn = new String(commonByteArray_PDF2EXCEL_data_extraction, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDF2EXCEL_data_extraction.length) {
				if(length < 1024 && commonByteArray_PDF2EXCEL_data_extraction.length == 0) {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[1024];
				} else {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PDF2EXCEL_data_extraction, 0, length);
			strReturn = new String(commonByteArray_PDF2EXCEL_data_extraction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDF2EXCEL_data_extraction) {

        	try {

        		int length = 0;
		
						this.Category = readInteger(dis);
					
						this.Style = readInteger(dis);
					
						this.Type = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Unit_Cost = null;
           				} else {
           			    	this.Unit_Cost = dis.readFloat();
           				}
					
					this.Detailed_Description = readString(dis);
					
						this.Quantity = readInteger(dis);
					
						this.SR_Pack = readInteger(dis);
					
						this.Packs = readInteger(dis);
					
					this.BUYER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRE_TICKET = null;
           				} else {
           			    	this.PRE_TICKET = dis.readChar();
           				}
					
						this.PO = readInteger(dis);
					
					this.COUNTRY_OF_ORIGIN = readString(dis);
					
					this.MODE_OF_TRANSPORT = readString(dis);
					
					this.EXITING_PORT = readString(dis);
					
						this.TOTAL_UNITS = readInteger(dis);
					
					this.CANCEL_SHIPMENT_DATE = readString(dis);
					
					this.STORE_READY = readString(dis);
					
						this.Store_No = readInteger(dis);
					
					this.Store_Address = readString(dis);
					
					this.City = readString(dis);
					
					this.Province = readString(dis);
					
					this.Postal_Code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PDF2EXCEL_data_extraction) {

        	try {

        		int length = 0;
		
						this.Category = readInteger(dis);
					
						this.Style = readInteger(dis);
					
						this.Type = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Unit_Cost = null;
           				} else {
           			    	this.Unit_Cost = dis.readFloat();
           				}
					
					this.Detailed_Description = readString(dis);
					
						this.Quantity = readInteger(dis);
					
						this.SR_Pack = readInteger(dis);
					
						this.Packs = readInteger(dis);
					
					this.BUYER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRE_TICKET = null;
           				} else {
           			    	this.PRE_TICKET = dis.readChar();
           				}
					
						this.PO = readInteger(dis);
					
					this.COUNTRY_OF_ORIGIN = readString(dis);
					
					this.MODE_OF_TRANSPORT = readString(dis);
					
					this.EXITING_PORT = readString(dis);
					
						this.TOTAL_UNITS = readInteger(dis);
					
					this.CANCEL_SHIPMENT_DATE = readString(dis);
					
					this.STORE_READY = readString(dis);
					
						this.Store_No = readInteger(dis);
					
					this.Store_Address = readString(dis);
					
					this.City = readString(dis);
					
					this.Province = readString(dis);
					
					this.Postal_Code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Category,dos);
					
					// Integer
				
						writeInteger(this.Style,dos);
					
					// Integer
				
						writeInteger(this.Type,dos);
					
					// Float
				
						if(this.Unit_Cost == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Unit_Cost);
		            	}
					
					// String
				
						writeString(this.Detailed_Description,dos);
					
					// Integer
				
						writeInteger(this.Quantity,dos);
					
					// Integer
				
						writeInteger(this.SR_Pack,dos);
					
					// Integer
				
						writeInteger(this.Packs,dos);
					
					// String
				
						writeString(this.BUYER,dos);
					
					// Character
				
						if(this.PRE_TICKET == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.PRE_TICKET);
		            	}
					
					// Integer
				
						writeInteger(this.PO,dos);
					
					// String
				
						writeString(this.COUNTRY_OF_ORIGIN,dos);
					
					// String
				
						writeString(this.MODE_OF_TRANSPORT,dos);
					
					// String
				
						writeString(this.EXITING_PORT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_UNITS,dos);
					
					// String
				
						writeString(this.CANCEL_SHIPMENT_DATE,dos);
					
					// String
				
						writeString(this.STORE_READY,dos);
					
					// Integer
				
						writeInteger(this.Store_No,dos);
					
					// String
				
						writeString(this.Store_Address,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.Province,dos);
					
					// String
				
						writeString(this.Postal_Code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Category,dos);
					
					// Integer
				
						writeInteger(this.Style,dos);
					
					// Integer
				
						writeInteger(this.Type,dos);
					
					// Float
				
						if(this.Unit_Cost == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Unit_Cost);
		            	}
					
					// String
				
						writeString(this.Detailed_Description,dos);
					
					// Integer
				
						writeInteger(this.Quantity,dos);
					
					// Integer
				
						writeInteger(this.SR_Pack,dos);
					
					// Integer
				
						writeInteger(this.Packs,dos);
					
					// String
				
						writeString(this.BUYER,dos);
					
					// Character
				
						if(this.PRE_TICKET == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.PRE_TICKET);
		            	}
					
					// Integer
				
						writeInteger(this.PO,dos);
					
					// String
				
						writeString(this.COUNTRY_OF_ORIGIN,dos);
					
					// String
				
						writeString(this.MODE_OF_TRANSPORT,dos);
					
					// String
				
						writeString(this.EXITING_PORT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_UNITS,dos);
					
					// String
				
						writeString(this.CANCEL_SHIPMENT_DATE,dos);
					
					// String
				
						writeString(this.STORE_READY,dos);
					
					// Integer
				
						writeInteger(this.Store_No,dos);
					
					// String
				
						writeString(this.Store_Address,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.Province,dos);
					
					// String
				
						writeString(this.Postal_Code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Category="+String.valueOf(Category));
		sb.append(",Style="+String.valueOf(Style));
		sb.append(",Type="+String.valueOf(Type));
		sb.append(",Unit_Cost="+String.valueOf(Unit_Cost));
		sb.append(",Detailed_Description="+Detailed_Description);
		sb.append(",Quantity="+String.valueOf(Quantity));
		sb.append(",SR_Pack="+String.valueOf(SR_Pack));
		sb.append(",Packs="+String.valueOf(Packs));
		sb.append(",BUYER="+BUYER);
		sb.append(",PRE_TICKET="+String.valueOf(PRE_TICKET));
		sb.append(",PO="+String.valueOf(PO));
		sb.append(",COUNTRY_OF_ORIGIN="+COUNTRY_OF_ORIGIN);
		sb.append(",MODE_OF_TRANSPORT="+MODE_OF_TRANSPORT);
		sb.append(",EXITING_PORT="+EXITING_PORT);
		sb.append(",TOTAL_UNITS="+String.valueOf(TOTAL_UNITS));
		sb.append(",CANCEL_SHIPMENT_DATE="+CANCEL_SHIPMENT_DATE);
		sb.append(",STORE_READY="+STORE_READY);
		sb.append(",Store_No="+String.valueOf(Store_No));
		sb.append(",Store_Address="+Store_Address);
		sb.append(",City="+City);
		sb.append(",Province="+Province);
		sb.append(",Postal_Code="+Postal_Code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PDF2EXCEL_data_extraction = new byte[0];
    static byte[] commonByteArray_PDF2EXCEL_data_extraction = new byte[0];

	
			    public Integer Category;

				public Integer getCategory () {
					return this.Category;
				}
				
			    public Integer Style;

				public Integer getStyle () {
					return this.Style;
				}
				
			    public Integer Type;

				public Integer getType () {
					return this.Type;
				}
				
			    public Float Unit_Cost;

				public Float getUnit_Cost () {
					return this.Unit_Cost;
				}
				
			    public String Detailed_Description;

				public String getDetailed_Description () {
					return this.Detailed_Description;
				}
				
			    public Integer Quantity;

				public Integer getQuantity () {
					return this.Quantity;
				}
				
			    public Integer SR_Pack;

				public Integer getSR_Pack () {
					return this.SR_Pack;
				}
				
			    public Integer Packs;

				public Integer getPacks () {
					return this.Packs;
				}
				
			    public String BUYER;

				public String getBUYER () {
					return this.BUYER;
				}
				
			    public Character PRE_TICKET;

				public Character getPRE_TICKET () {
					return this.PRE_TICKET;
				}
				
			    public Integer PO;

				public Integer getPO () {
					return this.PO;
				}
				
			    public String COUNTRY_OF_ORIGIN;

				public String getCOUNTRY_OF_ORIGIN () {
					return this.COUNTRY_OF_ORIGIN;
				}
				
			    public String MODE_OF_TRANSPORT;

				public String getMODE_OF_TRANSPORT () {
					return this.MODE_OF_TRANSPORT;
				}
				
			    public String EXITING_PORT;

				public String getEXITING_PORT () {
					return this.EXITING_PORT;
				}
				
			    public Integer TOTAL_UNITS;

				public Integer getTOTAL_UNITS () {
					return this.TOTAL_UNITS;
				}
				
			    public String CANCEL_SHIPMENT_DATE;

				public String getCANCEL_SHIPMENT_DATE () {
					return this.CANCEL_SHIPMENT_DATE;
				}
				
			    public String STORE_READY;

				public String getSTORE_READY () {
					return this.STORE_READY;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDF2EXCEL_data_extraction.length) {
				if(length < 1024 && commonByteArray_PDF2EXCEL_data_extraction.length == 0) {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[1024];
				} else {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDF2EXCEL_data_extraction, 0, length);
			strReturn = new String(commonByteArray_PDF2EXCEL_data_extraction, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDF2EXCEL_data_extraction.length) {
				if(length < 1024 && commonByteArray_PDF2EXCEL_data_extraction.length == 0) {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[1024];
				} else {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PDF2EXCEL_data_extraction, 0, length);
			strReturn = new String(commonByteArray_PDF2EXCEL_data_extraction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDF2EXCEL_data_extraction) {

        	try {

        		int length = 0;
		
						this.Category = readInteger(dis);
					
						this.Style = readInteger(dis);
					
						this.Type = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Unit_Cost = null;
           				} else {
           			    	this.Unit_Cost = dis.readFloat();
           				}
					
					this.Detailed_Description = readString(dis);
					
						this.Quantity = readInteger(dis);
					
						this.SR_Pack = readInteger(dis);
					
						this.Packs = readInteger(dis);
					
					this.BUYER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRE_TICKET = null;
           				} else {
           			    	this.PRE_TICKET = dis.readChar();
           				}
					
						this.PO = readInteger(dis);
					
					this.COUNTRY_OF_ORIGIN = readString(dis);
					
					this.MODE_OF_TRANSPORT = readString(dis);
					
					this.EXITING_PORT = readString(dis);
					
						this.TOTAL_UNITS = readInteger(dis);
					
					this.CANCEL_SHIPMENT_DATE = readString(dis);
					
					this.STORE_READY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PDF2EXCEL_data_extraction) {

        	try {

        		int length = 0;
		
						this.Category = readInteger(dis);
					
						this.Style = readInteger(dis);
					
						this.Type = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Unit_Cost = null;
           				} else {
           			    	this.Unit_Cost = dis.readFloat();
           				}
					
					this.Detailed_Description = readString(dis);
					
						this.Quantity = readInteger(dis);
					
						this.SR_Pack = readInteger(dis);
					
						this.Packs = readInteger(dis);
					
					this.BUYER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRE_TICKET = null;
           				} else {
           			    	this.PRE_TICKET = dis.readChar();
           				}
					
						this.PO = readInteger(dis);
					
					this.COUNTRY_OF_ORIGIN = readString(dis);
					
					this.MODE_OF_TRANSPORT = readString(dis);
					
					this.EXITING_PORT = readString(dis);
					
						this.TOTAL_UNITS = readInteger(dis);
					
					this.CANCEL_SHIPMENT_DATE = readString(dis);
					
					this.STORE_READY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Category,dos);
					
					// Integer
				
						writeInteger(this.Style,dos);
					
					// Integer
				
						writeInteger(this.Type,dos);
					
					// Float
				
						if(this.Unit_Cost == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Unit_Cost);
		            	}
					
					// String
				
						writeString(this.Detailed_Description,dos);
					
					// Integer
				
						writeInteger(this.Quantity,dos);
					
					// Integer
				
						writeInteger(this.SR_Pack,dos);
					
					// Integer
				
						writeInteger(this.Packs,dos);
					
					// String
				
						writeString(this.BUYER,dos);
					
					// Character
				
						if(this.PRE_TICKET == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.PRE_TICKET);
		            	}
					
					// Integer
				
						writeInteger(this.PO,dos);
					
					// String
				
						writeString(this.COUNTRY_OF_ORIGIN,dos);
					
					// String
				
						writeString(this.MODE_OF_TRANSPORT,dos);
					
					// String
				
						writeString(this.EXITING_PORT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_UNITS,dos);
					
					// String
				
						writeString(this.CANCEL_SHIPMENT_DATE,dos);
					
					// String
				
						writeString(this.STORE_READY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Category,dos);
					
					// Integer
				
						writeInteger(this.Style,dos);
					
					// Integer
				
						writeInteger(this.Type,dos);
					
					// Float
				
						if(this.Unit_Cost == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Unit_Cost);
		            	}
					
					// String
				
						writeString(this.Detailed_Description,dos);
					
					// Integer
				
						writeInteger(this.Quantity,dos);
					
					// Integer
				
						writeInteger(this.SR_Pack,dos);
					
					// Integer
				
						writeInteger(this.Packs,dos);
					
					// String
				
						writeString(this.BUYER,dos);
					
					// Character
				
						if(this.PRE_TICKET == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.PRE_TICKET);
		            	}
					
					// Integer
				
						writeInteger(this.PO,dos);
					
					// String
				
						writeString(this.COUNTRY_OF_ORIGIN,dos);
					
					// String
				
						writeString(this.MODE_OF_TRANSPORT,dos);
					
					// String
				
						writeString(this.EXITING_PORT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_UNITS,dos);
					
					// String
				
						writeString(this.CANCEL_SHIPMENT_DATE,dos);
					
					// String
				
						writeString(this.STORE_READY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Category="+String.valueOf(Category));
		sb.append(",Style="+String.valueOf(Style));
		sb.append(",Type="+String.valueOf(Type));
		sb.append(",Unit_Cost="+String.valueOf(Unit_Cost));
		sb.append(",Detailed_Description="+Detailed_Description);
		sb.append(",Quantity="+String.valueOf(Quantity));
		sb.append(",SR_Pack="+String.valueOf(SR_Pack));
		sb.append(",Packs="+String.valueOf(Packs));
		sb.append(",BUYER="+BUYER);
		sb.append(",PRE_TICKET="+String.valueOf(PRE_TICKET));
		sb.append(",PO="+String.valueOf(PO));
		sb.append(",COUNTRY_OF_ORIGIN="+COUNTRY_OF_ORIGIN);
		sb.append(",MODE_OF_TRANSPORT="+MODE_OF_TRANSPORT);
		sb.append(",EXITING_PORT="+EXITING_PORT);
		sb.append(",TOTAL_UNITS="+String.valueOf(TOTAL_UNITS));
		sb.append(",CANCEL_SHIPMENT_DATE="+CANCEL_SHIPMENT_DATE);
		sb.append(",STORE_READY="+STORE_READY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputExcel_2Struct implements routines.system.IPersistableRow<after_tFileInputExcel_2Struct> {
    final static byte[] commonByteArrayLock_PDF2EXCEL_data_extraction = new byte[0];
    static byte[] commonByteArray_PDF2EXCEL_data_extraction = new byte[0];

	
			    public Integer Category;

				public Integer getCategory () {
					return this.Category;
				}
				
			    public Integer Style;

				public Integer getStyle () {
					return this.Style;
				}
				
			    public Integer Type;

				public Integer getType () {
					return this.Type;
				}
				
			    public Float Unit_Cost;

				public Float getUnit_Cost () {
					return this.Unit_Cost;
				}
				
			    public String Detailed_Description;

				public String getDetailed_Description () {
					return this.Detailed_Description;
				}
				
			    public Integer Quantity;

				public Integer getQuantity () {
					return this.Quantity;
				}
				
			    public Integer SR_Pack;

				public Integer getSR_Pack () {
					return this.SR_Pack;
				}
				
			    public Integer Packs;

				public Integer getPacks () {
					return this.Packs;
				}
				
			    public String BUYER;

				public String getBUYER () {
					return this.BUYER;
				}
				
			    public Character PRE_TICKET;

				public Character getPRE_TICKET () {
					return this.PRE_TICKET;
				}
				
			    public Integer PO;

				public Integer getPO () {
					return this.PO;
				}
				
			    public String COUNTRY_OF_ORIGIN;

				public String getCOUNTRY_OF_ORIGIN () {
					return this.COUNTRY_OF_ORIGIN;
				}
				
			    public String MODE_OF_TRANSPORT;

				public String getMODE_OF_TRANSPORT () {
					return this.MODE_OF_TRANSPORT;
				}
				
			    public String EXITING_PORT;

				public String getEXITING_PORT () {
					return this.EXITING_PORT;
				}
				
			    public Integer TOTAL_UNITS;

				public Integer getTOTAL_UNITS () {
					return this.TOTAL_UNITS;
				}
				
			    public String CANCEL_SHIPMENT_DATE;

				public String getCANCEL_SHIPMENT_DATE () {
					return this.CANCEL_SHIPMENT_DATE;
				}
				
			    public String STORE_READY;

				public String getSTORE_READY () {
					return this.STORE_READY;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDF2EXCEL_data_extraction.length) {
				if(length < 1024 && commonByteArray_PDF2EXCEL_data_extraction.length == 0) {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[1024];
				} else {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDF2EXCEL_data_extraction, 0, length);
			strReturn = new String(commonByteArray_PDF2EXCEL_data_extraction, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDF2EXCEL_data_extraction.length) {
				if(length < 1024 && commonByteArray_PDF2EXCEL_data_extraction.length == 0) {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[1024];
				} else {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PDF2EXCEL_data_extraction, 0, length);
			strReturn = new String(commonByteArray_PDF2EXCEL_data_extraction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDF2EXCEL_data_extraction) {

        	try {

        		int length = 0;
		
						this.Category = readInteger(dis);
					
						this.Style = readInteger(dis);
					
						this.Type = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Unit_Cost = null;
           				} else {
           			    	this.Unit_Cost = dis.readFloat();
           				}
					
					this.Detailed_Description = readString(dis);
					
						this.Quantity = readInteger(dis);
					
						this.SR_Pack = readInteger(dis);
					
						this.Packs = readInteger(dis);
					
					this.BUYER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRE_TICKET = null;
           				} else {
           			    	this.PRE_TICKET = dis.readChar();
           				}
					
						this.PO = readInteger(dis);
					
					this.COUNTRY_OF_ORIGIN = readString(dis);
					
					this.MODE_OF_TRANSPORT = readString(dis);
					
					this.EXITING_PORT = readString(dis);
					
						this.TOTAL_UNITS = readInteger(dis);
					
					this.CANCEL_SHIPMENT_DATE = readString(dis);
					
					this.STORE_READY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PDF2EXCEL_data_extraction) {

        	try {

        		int length = 0;
		
						this.Category = readInteger(dis);
					
						this.Style = readInteger(dis);
					
						this.Type = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Unit_Cost = null;
           				} else {
           			    	this.Unit_Cost = dis.readFloat();
           				}
					
					this.Detailed_Description = readString(dis);
					
						this.Quantity = readInteger(dis);
					
						this.SR_Pack = readInteger(dis);
					
						this.Packs = readInteger(dis);
					
					this.BUYER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRE_TICKET = null;
           				} else {
           			    	this.PRE_TICKET = dis.readChar();
           				}
					
						this.PO = readInteger(dis);
					
					this.COUNTRY_OF_ORIGIN = readString(dis);
					
					this.MODE_OF_TRANSPORT = readString(dis);
					
					this.EXITING_PORT = readString(dis);
					
						this.TOTAL_UNITS = readInteger(dis);
					
					this.CANCEL_SHIPMENT_DATE = readString(dis);
					
					this.STORE_READY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Category,dos);
					
					// Integer
				
						writeInteger(this.Style,dos);
					
					// Integer
				
						writeInteger(this.Type,dos);
					
					// Float
				
						if(this.Unit_Cost == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Unit_Cost);
		            	}
					
					// String
				
						writeString(this.Detailed_Description,dos);
					
					// Integer
				
						writeInteger(this.Quantity,dos);
					
					// Integer
				
						writeInteger(this.SR_Pack,dos);
					
					// Integer
				
						writeInteger(this.Packs,dos);
					
					// String
				
						writeString(this.BUYER,dos);
					
					// Character
				
						if(this.PRE_TICKET == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.PRE_TICKET);
		            	}
					
					// Integer
				
						writeInteger(this.PO,dos);
					
					// String
				
						writeString(this.COUNTRY_OF_ORIGIN,dos);
					
					// String
				
						writeString(this.MODE_OF_TRANSPORT,dos);
					
					// String
				
						writeString(this.EXITING_PORT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_UNITS,dos);
					
					// String
				
						writeString(this.CANCEL_SHIPMENT_DATE,dos);
					
					// String
				
						writeString(this.STORE_READY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Category,dos);
					
					// Integer
				
						writeInteger(this.Style,dos);
					
					// Integer
				
						writeInteger(this.Type,dos);
					
					// Float
				
						if(this.Unit_Cost == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Unit_Cost);
		            	}
					
					// String
				
						writeString(this.Detailed_Description,dos);
					
					// Integer
				
						writeInteger(this.Quantity,dos);
					
					// Integer
				
						writeInteger(this.SR_Pack,dos);
					
					// Integer
				
						writeInteger(this.Packs,dos);
					
					// String
				
						writeString(this.BUYER,dos);
					
					// Character
				
						if(this.PRE_TICKET == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.PRE_TICKET);
		            	}
					
					// Integer
				
						writeInteger(this.PO,dos);
					
					// String
				
						writeString(this.COUNTRY_OF_ORIGIN,dos);
					
					// String
				
						writeString(this.MODE_OF_TRANSPORT,dos);
					
					// String
				
						writeString(this.EXITING_PORT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_UNITS,dos);
					
					// String
				
						writeString(this.CANCEL_SHIPMENT_DATE,dos);
					
					// String
				
						writeString(this.STORE_READY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Category="+String.valueOf(Category));
		sb.append(",Style="+String.valueOf(Style));
		sb.append(",Type="+String.valueOf(Type));
		sb.append(",Unit_Cost="+String.valueOf(Unit_Cost));
		sb.append(",Detailed_Description="+Detailed_Description);
		sb.append(",Quantity="+String.valueOf(Quantity));
		sb.append(",SR_Pack="+String.valueOf(SR_Pack));
		sb.append(",Packs="+String.valueOf(Packs));
		sb.append(",BUYER="+BUYER);
		sb.append(",PRE_TICKET="+String.valueOf(PRE_TICKET));
		sb.append(",PO="+String.valueOf(PO));
		sb.append(",COUNTRY_OF_ORIGIN="+COUNTRY_OF_ORIGIN);
		sb.append(",MODE_OF_TRANSPORT="+MODE_OF_TRANSPORT);
		sb.append(",EXITING_PORT="+EXITING_PORT);
		sb.append(",TOTAL_UNITS="+String.valueOf(TOTAL_UNITS));
		sb.append(",CANCEL_SHIPMENT_DATE="+CANCEL_SHIPMENT_DATE);
		sb.append(",STORE_READY="+STORE_READY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputExcel_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputExcel_1Process(globalMap);

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	
		tHash_Lookup_row2.initGet();
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:NIs0wDwAhjSpAAMi6jq6cVC8mFSYIEnoZCqXbg==");
        String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
        if (password_tFileInputExcel_2.isEmpty()){
            password_tFileInputExcel_2 = null;
        }
			class RegexUtil_tFileInputExcel_2 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

		Object source_tFileInputExcel_2 = "D:/pdf templates for packing/HS_data.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

		if(source_tFileInputExcel_2 instanceof String){
			workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_2), password_tFileInputExcel_2, true);
		} else if(source_tFileInputExcel_2 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_2, password_tFileInputExcel_2);
		} else{
			workbook_tFileInputExcel_2 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_2.addAll(regexUtil_tFileInputExcel_2.getSheets(workbook_tFileInputExcel_2, "Packed Items", false));
    	if(sheetList_tFileInputExcel_2.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
			if(sheet_FilterNull_tFileInputExcel_2!=null && sheetList_FilterNull_tFileInputExcel_2.iterator()!=null && sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
			}
		}
		sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
	if(sheetList_tFileInputExcel_2.size()>0){
		int nb_line_tFileInputExcel_2 = 0;

        int begin_line_tFileInputExcel_2 = 1;

        int footer_input_tFileInputExcel_2 = 0;

        int end_line_tFileInputExcel_2=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2:sheetList_tFileInputExcel_2){
			end_line_tFileInputExcel_2+=(sheet_tFileInputExcel_2.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
        int limit_tFileInputExcel_2 = -1;
        int start_column_tFileInputExcel_2 = 1-1;
        int end_column_tFileInputExcel_2 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0);
        int rowCount_tFileInputExcel_2 = 0;
        int sheetIndex_tFileInputExcel_2 = 0;
        int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++){

        	int emptyColumnCount_tFileInputExcel_2 = 0;

        	if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
        		break;
        	}

            while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
                rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
                sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(++sheetIndex_tFileInputExcel_2);
                currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_2_CURRENT_SHEET",sheet_tFileInputExcel_2.getSheetName());
            if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
                row_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
            }
		    row1 = null;
					int tempRowLength_tFileInputExcel_2 = 17;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
			String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
			int excel_end_column_tFileInputExcel_2;
			if(row_tFileInputExcel_2==null){
				excel_end_column_tFileInputExcel_2=0;
			}else{
				excel_end_column_tFileInputExcel_2=row_tFileInputExcel_2.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_2;
			if(end_column_tFileInputExcel_2 == -1){
				actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
			}
			else{
				actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 >	excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2 : end_column_tFileInputExcel_2;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_2;i++){
				if(i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2.getCell(i + start_column_tFileInputExcel_2);
					if(cell_tFileInputExcel_2!=null){
					switch (cell_tFileInputExcel_2.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
									temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2.format(cell_tFileInputExcel_2.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
											temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_2.getNumericCellValue());
										temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_2[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_2[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_2[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_2[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_2 = false;
			row1 = new row1Struct();
			int curColNum_tFileInputExcel_2 = -1;
			String curColName_tFileInputExcel_2 = "";
			try{
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Category";

				row1.Category = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row1.Category = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Style";

				row1.Style = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row1.Style = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 2;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Type";

				row1.Type = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row1.Type = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 3;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Unit_Cost";

				row1.Unit_Cost = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row1.Unit_Cost = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 4;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Detailed_Description";

				row1.Detailed_Description = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row1.Detailed_Description = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 5;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Quantity";

				row1.Quantity = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row1.Quantity = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 6;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "SR_Pack";

				row1.SR_Pack = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row1.SR_Pack = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 7;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Packs";

				row1.Packs = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row1.Packs = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 8;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "BUYER";

				row1.BUYER = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row1.BUYER = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 9;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "PRE_TICKET";

				row1.PRE_TICKET = ParserUtils.parseTo_Character(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]);
			}else{
				row1.PRE_TICKET = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 10;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "PO";

				row1.PO = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row1.PO = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 11;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "COUNTRY_OF_ORIGIN";

				row1.COUNTRY_OF_ORIGIN = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row1.COUNTRY_OF_ORIGIN = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 12;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "MODE_OF_TRANSPORT";

				row1.MODE_OF_TRANSPORT = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row1.MODE_OF_TRANSPORT = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 13;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "EXITING_PORT";

				row1.EXITING_PORT = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row1.EXITING_PORT = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 14;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "TOTAL_UNITS";

				row1.TOTAL_UNITS = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row1.TOTAL_UNITS = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 15;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "CANCEL_SHIPMENT_DATE";

				row1.CANCEL_SHIPMENT_DATE = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row1.CANCEL_SHIPMENT_DATE = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 16;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "STORE_READY";

				row1.STORE_READY = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row1.STORE_READY = null;
				emptyColumnCount_tFileInputExcel_2++;
			}

				nb_line_tFileInputExcel_2++;
				
			}catch(java.lang.Exception e){
globalMap.put("tFileInputExcel_2_ERROR_MESSAGE",e.getMessage());
			whetherReject_tFileInputExcel_2 = true;
					 System.err.println(e.getMessage());
					 row1 = null;
			}


		



 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
	
	/**
	 * [tFileInputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow2 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow2 = true;
			           		  	} // G 21
                    		  	
                    		

							row2Struct row2 = null;
                    		  	 
							

								while ((tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) || forceLooprow2) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row2'
									
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								
								if(!forceLooprow2) { // G 46
								
							
								 
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow2 = false;
									 	
							
	            	
	            	
	            
                try {// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.Category = row1.Category ;
out1_tmp.Style = row1.Style ;
out1_tmp.Type = row1.Type ;
out1_tmp.Unit_Cost = row1.Unit_Cost ;
out1_tmp.Detailed_Description = row1.Detailed_Description ;
out1_tmp.Quantity = row1.Quantity ;
out1_tmp.SR_Pack = row1.SR_Pack ;
out1_tmp.Packs = row1.Packs ;
out1_tmp.BUYER = row1.BUYER ;
out1_tmp.PRE_TICKET = row1.PRE_TICKET ;
out1_tmp.PO = row1.PO ;
out1_tmp.COUNTRY_OF_ORIGIN = row1.COUNTRY_OF_ORIGIN ;
out1_tmp.MODE_OF_TRANSPORT = row1.MODE_OF_TRANSPORT ;
out1_tmp.EXITING_PORT = row1.EXITING_PORT ;
out1_tmp.TOTAL_UNITS = row1.TOTAL_UNITS ;
out1_tmp.CANCEL_SHIPMENT_DATE = row1.CANCEL_SHIPMENT_DATE ;
out1_tmp.STORE_READY = row1.STORE_READY ;
out1_tmp.Store_No = row2.Store_No ;
out1_tmp.Store_Address = row2.Store_Address ;
out1_tmp.City = row2.City ;
out1_tmp.Province = row2.Province ;
out1_tmp.Postal_Code = row2.Postal_Code ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;


		} catch (java.lang.Exception e) {
			//if anohter java.lang.Exception when processing an java.lang.Exception
    		
			try{//EE
Var__tMap_1__Struct Var = Var__tMap_1;
			
			
    					
                		out1 = null;
         } catch (java.lang.Exception ee) {//EE
        		
				ee.printStackTrace();					
                		out1 = null;
		}//EE  			
	}//end catch








 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(out1.Category != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.Category)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.Style != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.Style)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.Type != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.Type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.Unit_Cost != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.formatUnwithE(out1.Unit_Cost)				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.Detailed_Description != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.Detailed_Description)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.Quantity != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.Quantity)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.SR_Pack != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.SR_Pack)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.Packs != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.Packs)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.BUYER != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.BUYER)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.PRE_TICKET != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.PRE_TICKET)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.PO != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.PO)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.COUNTRY_OF_ORIGIN != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.COUNTRY_OF_ORIGIN)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.MODE_OF_TRANSPORT != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.MODE_OF_TRANSPORT)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.EXITING_PORT != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.EXITING_PORT)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.TOTAL_UNITS != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.TOTAL_UNITS)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.CANCEL_SHIPMENT_DATE != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.CANCEL_SHIPMENT_DATE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.STORE_READY != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.STORE_READY)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.Store_No != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.Store_No)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.Store_Address != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.Store_Address)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.City != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.City)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.Province != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.Province)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out1.Postal_Code != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out1.Postal_Code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "out1"



	
		} // close loop of lookup 'row2' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_2 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_2.getPackage().revert();
  				}
				
		}	
		

 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PDF2EXCEL_data_extraction = new byte[0];
    static byte[] commonByteArray_PDF2EXCEL_data_extraction = new byte[0];

	
			    public Integer Store_No;

				public Integer getStore_No () {
					return this.Store_No;
				}
				
			    public String Store_Address;

				public String getStore_Address () {
					return this.Store_Address;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String Province;

				public String getProvince () {
					return this.Province;
				}
				
			    public String Postal_Code;

				public String getPostal_Code () {
					return this.Postal_Code;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDF2EXCEL_data_extraction.length) {
				if(length < 1024 && commonByteArray_PDF2EXCEL_data_extraction.length == 0) {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[1024];
				} else {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDF2EXCEL_data_extraction, 0, length);
			strReturn = new String(commonByteArray_PDF2EXCEL_data_extraction, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDF2EXCEL_data_extraction.length) {
				if(length < 1024 && commonByteArray_PDF2EXCEL_data_extraction.length == 0) {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[1024];
				} else {
   					commonByteArray_PDF2EXCEL_data_extraction = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PDF2EXCEL_data_extraction, 0, length);
			strReturn = new String(commonByteArray_PDF2EXCEL_data_extraction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDF2EXCEL_data_extraction) {

        	try {

        		int length = 0;
		
						this.Store_No = readInteger(dis);
					
					this.Store_Address = readString(dis);
					
					this.City = readString(dis);
					
					this.Province = readString(dis);
					
					this.Postal_Code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PDF2EXCEL_data_extraction) {

        	try {

        		int length = 0;
		
						this.Store_No = readInteger(dis);
					
					this.Store_Address = readString(dis);
					
					this.City = readString(dis);
					
					this.Province = readString(dis);
					
					this.Postal_Code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Store_No,dos);
					
					// String
				
						writeString(this.Store_Address,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.Province,dos);
					
					// String
				
						writeString(this.Postal_Code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Store_No,dos);
					
					// String
				
						writeString(this.Store_Address,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.Province,dos);
					
					// String
				
						writeString(this.Postal_Code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Store_No="+String.valueOf(Store_No));
		sb.append(",Store_Address="+Store_Address);
		sb.append(",City="+City);
		sb.append(",Province="+Province);
		sb.append(",Postal_Code="+Postal_Code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tFileInputExcel_1 - inputs:(after_tFileInputExcel_2) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:fXggwMN0B4XWWU2F/aQuzlMqPhQZdILyK6DqWQ==");
        String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
        if (password_tFileInputExcel_1.isEmpty()){
            password_tFileInputExcel_1 = null;
        }
			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = "D:/pdf templates for packing/HS_data.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_1), password_tFileInputExcel_1, true);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_1, password_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_1.addAll(regexUtil_tFileInputExcel_1.getSheets(workbook_tFileInputExcel_1, "Distribution Centers", false));
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 1;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = -1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
		    row2 = null;
		    row2 = null;
					int tempRowLength_tFileInputExcel_1 = 5;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row2 = new row2Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Store_No";

				row2.Store_No = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row2.Store_No = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Store_Address";

				row2.Store_Address = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row2.Store_Address = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "City";

				row2.City = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row2.City = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Province";

				row2.Province = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row2.Province = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 4;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Postal_Code";

				row2.Postal_Code = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row2.Postal_Code = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
globalMap.put("tFileInputExcel_1_ERROR_MESSAGE",e.getMessage());
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row2 = null;
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
	
	/**
	 * [tFileInputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.Store_No = row2.Store_No;
				
				row2_HashRow.Store_Address = row2.Store_Address;
				
				row2_HashRow.City = row2.City;
				
				row2_HashRow.Province = row2.Province;
				
				row2_HashRow.Postal_Code = row2.Postal_Code;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		

 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final data_extraction data_extractionClass = new data_extraction();

        int exitCode = data_extractionClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = data_extraction.class.getClassLoader().getResourceAsStream("pdf2excel/data_extraction_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = data_extraction.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputExcel_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputExcel_2) {
globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", -1);

e_tFileInputExcel_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : data_extraction");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     134859 characters generated by Talend Open Studio for Data Integration 
 *     on the 18 October 2024 at 4:11:04 pm IST
 ************************************************************************************************/